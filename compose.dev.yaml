services:
  api:
    extends:
      file: compose.yaml
      service: api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`) && !PathPrefix(`/api/auth`) && !PathPrefix(`/api/models`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    depends_on:
      - postgres
      - traefik

  manager:
    extends:
      file: compose.yaml
      service: manager
    depends_on:
      - postgres
      - traefik

  web:
    extends:
      file: compose.yaml
      service: web
    command: ["npm", "run", "dev"]
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://api:8000/api}
      NEXT_PUBLIC_MANAGER_BASE_URL: ${NEXT_PUBLIC_MANAGER_BASE_URL:-http://manager:8000/api}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-api.rule=PathPrefix(`/api/auth`) || PathPrefix(`/api/models`)"
      - "traefik.http.routers.web-api.entrypoints=web"
      - "traefik.http.routers.web-api.priority=100"
      - "traefik.http.routers.web.rule=PathPrefix(`/`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.routers.web.priority=1"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    depends_on:
      - api
      - traefik

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always

  traefik:
    image: traefik:v3.2
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: always

volumes:
  postgres-data:
  web-db:
